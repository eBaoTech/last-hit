{"version":3,"sources":["../index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kBAAgB;AAChB,oDAA8B;AAC9B,uCAA0C;AAC1C,yCAAyE;AACzE,qCAAsD;AACtD,2CAAgD;AA0BvC,yBA1BA,yBAAc,CA0BA;AAzBvB,yDAA2C;AAyBlB,sBAzBlB,aAAW,CAyBkB;AAvBpC,IAAM,GAAG,GAAG;IACX,IAAM,SAAS,GAAG,oBAAY,EAAE,CAAC;IACjC,iBAAO,CAAC,IAAI,CAAE,CAAA,aAAW,SAAS,eAAY,CAAA,CAAC,IAAY,CAAC,KAAK,CAAC,CAAC;IAEnE,CAAC;;;;;;oBAEa,qBAAM,mBAAU,EAAE,EAAA;;oBAAxB,GAAG,GAAG,SAAkB;oBACxB,KAAK,GAAG,iBAAS,CAAC,GAAG,CAAC,CAAC;yBACzB,GAAG,CAAC,YAAY,EAAE,EAAlB,wBAAkB;oBACrB,qBAAM,+BAAqB,CAAC,KAAK,EAAE,GAAG,CAAC,EAAA;;oBAAvC,SAAuC,CAAC;;wBAExC,qBAAM,2BAAiB,CAAC,KAAK,EAAE,GAAG,CAAC,EAAA;;oBAAnC,SAAmC,CAAC;;;;;oBAGrC,iBAAO,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC;oBACjB,sBAAO,OAAO,CAAC,MAAM,EAAE,EAAC;;;;SAEzB,CAAC,EAAE;SACF,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC;SAC3B,KAAK,CAAC,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF,kBAAe,GAAG,CAAC","file":"index.js","sourcesContent":["import 'colors';\nimport console from 'console';\nimport { loadConfig } from './lib/config';\nimport { doOnMultipleProcesses, doOnSingleProcess } from './lib/handler';\nimport { findFlows, getProcessId } from './lib/utils';\nimport { createReplayer } from './lib/replayer';\nimport Environment from './lib/config/env';\n\nconst run = () => {\n\tconst processId = getProcessId();\n\tconsole.info((`Process[${processId}] started.`.bold as any).green);\n\n\t(async (): Promise<void> => {\n\t\ttry {\n\t\t\tconst env = await loadConfig();\n\t\t\tconst flows = findFlows(env);\n\t\t\tif (env.isOnParallel()) {\n\t\t\t\tawait doOnMultipleProcesses(flows, env);\n\t\t\t} else {\n\t\t\t\tawait doOnSingleProcess(flows, env);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\treturn Promise.reject();\n\t\t}\n\t})()\n\t\t.then(() => process.exit(0))\n\t\t.catch(() => process.exit(1));\n};\n\nexport default run;\nexport { createReplayer, Environment };\n"]}