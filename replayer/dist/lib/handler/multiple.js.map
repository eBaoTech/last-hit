{"version":3,"sources":["../lib/handler/multiple.ts"],"names":[],"mappings":"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","file":"multiple.js","sourcesContent":["import spawn from 'cross-spawn';\nimport fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport path from 'path';\nimport uuidv4 from 'uuid/v4';\nimport Environment from '../config/env';\nimport { FlowFile, Config } from '../types';\nimport { getProcessId } from '../utils';\nimport { print } from './print';\n\nconst processId = getProcessId();\n\nconst createTemporaryFolders = (\n\tenv: Environment\n): {\n\tcomposeTempFolder: string;\n\tresultTempFolder: string;\n} => {\n\tconst workspace = env.getWorkspace();\n\n\tconst composeTempFolder = path.join(workspace, 'compose-temp');\n\tif (fs.existsSync(composeTempFolder)) {\n\t\t// clear\n\t\tfs.rmdirSync(composeTempFolder, { recursive: true });\n\t}\n\t// recreate\n\tfs.mkdirSync(composeTempFolder);\n\n\tconst resultTempFolder = path.join(workspace, 'result-temp');\n\tif (fs.existsSync(resultTempFolder)) {\n\t\tfs.rmdirSync(resultTempFolder, { recursive: true });\n\t}\n\t// recreate\n\tfs.mkdirSync(resultTempFolder);\n\n\treturn {\n\t\tcomposeTempFolder,\n\t\tresultTempFolder\n\t};\n};\n\nexport const doOnMultipleProcesses = async (flows: FlowFile[], env: Environment): Promise<void> => {\n\tconst resolves: Array<() => void> = [];\n\tPromise.all(flows.map(() => new Promise(resolve => resolves.push(resolve)))).finally(() => {\n\t\tprint(env);\n\t\tconsole.info((`Process[${processId}] finished`.bold as any).green);\n\t});\n\n\tconst { composeTempFolder } = createTemporaryFolders(env);\n\n\tconst actions = flows.map((flow, index) => {\n\t\treturn () => {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\ttry {\n\t\t\t\t\tif (!fs.existsSync(composeTempFolder)) {\n\t\t\t\t\t\tfs.mkdirSync(composeTempFolder);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst filename = path.join(composeTempFolder, `compose-${uuidv4()}.json`);\n\t\t\t\t\tconst childConfig = env.exposeForSingleProcess({ includes: [flow] });\n\t\t\t\t\t((childConfig as unknown) as Config).env = childConfig.name;\n\t\t\t\t\tdelete childConfig.name;\n\t\t\t\t\tjsonfile.writeFileSync(filename, childConfig);\n\t\t\t\t\tconst child = spawn(\n\t\t\t\t\t\t'node',\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tprocess.argv[1],\n\t\t\t\t\t\t\t`--config-file=${filename}`,\n\t\t\t\t\t\t\t`--workspace=${env.getWorkspace()}`\n\t\t\t\t\t\t],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstdio: ['ignore', 'inherit', 'inherit']\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tchild.on('exit', () => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\tresolves[index]();\n\t\t\t\t\t});\n\t\t\t\t} catch {\n\t\t\t\t\tresolve();\n\t\t\t\t\tresolves[index]();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t});\n\n\t/**\n\t * get first action of actions queue.\n\t * when exists, do action and do next when action accomplished.\n\t * when not exists, do nothing and quit\n\t */\n\tconst next = () => {\n\t\tconst action = actions.shift();\n\t\taction && action().then(() => next());\n\t};\n\n\t/**\n\t * do actions until reach the parallel count\n\t */\n\tlet init = 0;\n\twhile (true) {\n\t\tinit++;\n\t\tnext();\n\t\tif (init == env.getParallel()) {\n\t\t\tbreak;\n\t\t}\n\t}\n};\n"]}