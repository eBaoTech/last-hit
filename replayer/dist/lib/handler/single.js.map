{"version":3,"sources":["../lib/handler/single.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAoB;AACpB,sDAAgC;AAChC,8CAAwB;AAGxB,kCAAmD;AACnD,iCAAgC;AAChC,6CAA2C;AAE3C,IAAM,SAAS,GAAG,oBAAY,EAAE,CAAC;AAEjC,IAAM,sBAAsB,GAAG,UAC9B,GAAgB;;;QAKV,SAAS,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC;QAC/B,gBAAgB,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAC7D,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE;YAC5B,sDAAsD;YACtD,YAAE,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;SACpD;QACD,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;YACrC,YAAE,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;SAC/B;QACK,gBAAgB,GAAG,cAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;QAChE,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;YACrC,YAAE,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;SAC/B;QAED,sBAAO;gBACN,gBAAgB,kBAAA;gBAChB,gBAAgB,kBAAA;aAChB,EAAC;;KACF,CAAC;AAEW,QAAA,iBAAiB,GAAG,UAAO,KAAiB,EAAE,GAAgB;;;;;gBACpE,MAAM,GAAG,iBAAS,EAAE,CAAC;gBACrB,OAAO,GAAa,EAAE,CAAC;gBACvB,YAAY,GAAc,EAAE,CAAC;;;;gBAElC,qBAAM,KAAK,CAAC,MAAM,CAAC,UAAO,OAAO,EAAE,IAAI;;;;wCACtC,qBAAM,OAAO,EAAA;;oCAAb,SAAa,CAAC;;;;oCAEiB,qBAAM,wBAAU,CAAC,IAAI,EAAE,GAAG,CAAC,EAAA;;oCAAnD,KAAwB,SAA2B,EAAjD,MAAM,YAAA,EAAE,SAAS,eAAA;oCACzB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oCACrB,YAAY,CAAC,IAAI,OAAjB,YAAY,EAAS,SAAS,EAAE;;;;oCAEhC,MAAM,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC;;;gCAEhB,aAAa;gCACb,sBAAO,OAAO,CAAC,OAAO,EAAE,EAAC;;;;yBAE1B,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,EAAA;;gBAZrB,SAYqB,CAAC;;;gBAEhB,cAAc,GAAG,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBACC,qBAAM,sBAAsB,CAAC,GAAG,CAAC,EAAA;;gBAA1E,KAAyC,SAAiC,EAAxE,gBAAgB,sBAAA,EAAE,gBAAgB,sBAAA;gBAE1C,kBAAQ,CAAC,aAAa,CAAC,cAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,cAAc,CAAC,EAAE,OAAO,CAAC,CAAC;gBAC7E,kBAAQ,CAAC,aAAa,CACrB,cAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,SAAS,EAAE,gBAAgB,CAAC,EACxD,YAAY,CACZ,CAAC;gBAEF,+BAA+B;gBAC/B,CAAC,cAAc,IAAI,aAAK,CAAC,GAAG,CAAC,CAAC;gBAC9B,OAAO,CAAC,IAAI,CAAE,CAAA,aAAW,SAAS,eAAY,CAAA,CAAC,IAAY,CAAC,KAAK,CAAC,CAAC;;;;;KAEpE,CAAC","file":"single.js","sourcesContent":["import fs from 'fs';\nimport jsonfile from 'jsonfile';\nimport path from 'path';\nimport Environment from '../config/env';\nimport { Coverages, FlowFile, Report } from '../types';\nimport { getLogger, getProcessId } from '../utils';\nimport { print } from './print';\nimport { handleFlow } from './single-flow';\n\nconst processId = getProcessId();\n\nconst createTemporaryFolders = async (\n\tenv: Environment\n): Promise<{\n\tresultTempFolder: string;\n\tthreadTempFolder: string;\n}> => {\n\tconst workspace = env.getWorkspace();\n\tconst resultTempFolder = path.join(workspace, 'result-temp');\n\tif (!env.isOnChildProcess()) {\n\t\t// not in child process, delete the result temp folder\n\t\tfs.rmdirSync(resultTempFolder, { recursive: true });\n\t}\n\tif (!fs.existsSync(resultTempFolder)) {\n\t\tfs.mkdirSync(resultTempFolder);\n\t}\n\tconst threadTempFolder = path.join(resultTempFolder, processId);\n\tif (!fs.existsSync(threadTempFolder)) {\n\t\tfs.mkdirSync(threadTempFolder);\n\t}\n\n\treturn {\n\t\tresultTempFolder,\n\t\tthreadTempFolder\n\t};\n};\n\nexport const doOnSingleProcess = async (flows: FlowFile[], env: Environment): Promise<void> => {\n\tconst logger = getLogger();\n\tconst reports: Report[] = [];\n\tconst allCoverages: Coverages = [];\n\ttry {\n\t\tawait flows.reduce(async (promise, flow) => {\n\t\t\tawait promise;\n\t\t\ttry {\n\t\t\t\tconst { report, coverages } = await handleFlow(flow, env);\n\t\t\t\treports.push(report);\n\t\t\t\tallCoverages.push(...coverages);\n\t\t\t} catch (e) {\n\t\t\t\tlogger.error(e);\n\t\t\t} finally {\n\t\t\t\t// do nothing\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t}, Promise.resolve());\n\t} finally {\n\t\tconst isChildProcess = env.isOnChildProcess();\n\t\tconst { resultTempFolder, threadTempFolder } = await createTemporaryFolders(env);\n\n\t\tjsonfile.writeFileSync(path.join(threadTempFolder, 'summary.json'), reports);\n\t\tjsonfile.writeFileSync(\n\t\t\tpath.join(resultTempFolder, processId, 'coverages.json'),\n\t\t\tallCoverages\n\t\t);\n\n\t\t// print when not child process\n\t\t!isChildProcess && print(env);\n\t\tconsole.info((`Process[${processId}] finished`.bold as any).green);\n\t}\n};\n"]}